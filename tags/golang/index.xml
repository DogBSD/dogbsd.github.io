<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on CatBSD&#39;s Blog</title>
    <link>https://dogbsd.github.io/tags/golang/</link>
    <description>Recent content in golang on CatBSD&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© CatBSD</copyright>
    <lastBuildDate>Sat, 07 May 2022 00:48:56 +0800</lastBuildDate><atom:link href="https://dogbsd.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang入门篇|14.tcp</title>
      <link>https://dogbsd.github.io/posts/golang-learning-14/</link>
      <pubDate>Sat, 07 May 2022 00:48:56 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-14/</guid>
      <description>server  package main  import ( 	&amp;#34;fmt&amp;#34; 	&amp;#34;log&amp;#34; 	&amp;#34;net&amp;#34; )  func main() { 	tcpAddr, _ := net.ResolveTCPAddr(&amp;#34;tcp&amp;#34;, &amp;#34;:8080&amp;#34;) 	listener, _ := net.ListenTCP(&amp;#34;tcp&amp;#34;, tcpAddr)  	for { 	Conn, err := listener.AcceptTCP() 	if err != nil { 	log.Fatal(err) 	return 	} 	go handleConnection(Conn) 	} }  func handleConnection(conn *net.TCPConn) { 	for{ 	buf := make([]byte, 1024) 	n,err := conn.</description>
    </item>
    
    <item>
      <title>Golang入门篇|13.文件的操作</title>
      <link>https://dogbsd.github.io/posts/golang-learning-13/</link>
      <pubDate>Sat, 07 May 2022 00:13:50 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-13/</guid>
      <description>未完，等有空再学习一下
package main  import ( 	&amp;#34;fmt&amp;#34; 	&amp;#34;log&amp;#34; 	&amp;#34;os&amp;#34; )  func main() { 	f, err := os.OpenFile(&amp;#34;./test.txt&amp;#34;, os.O_CREATE|os.O_RDWR, 0777) 	if err != nil { 	log.Fatal(err) 	return 	} 	for { 	b := make([]byte, 12) 	n, err := f.Read(b) 	if err != nil { 	fmt.Println(err) 	return 	} 	fmt.Println(string(b), n) 	} } </description>
    </item>
    
    <item>
      <title>Golang入门篇|12.并发编程sync</title>
      <link>https://dogbsd.github.io/posts/golang-learning-12/</link>
      <pubDate>Fri, 06 May 2022 03:37:09 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-12/</guid>
      <description>Mutex 互斥锁、RWMutex 读写互斥锁 package main  import ( 	&amp;#34;fmt&amp;#34; 	&amp;#34;sync&amp;#34; 	&amp;#34;time&amp;#34; )  func main() { 	SyncClass() }  func SyncClass() { 	l := &amp;amp;sync.RWMutex{} 	go lockFun(l) 	go lockFun(l) 	go readLockFun(l) 	go readLockFun(l) 	go readLockFun(l) 	go readLockFun(l)  	for { 	} } func lockFun(lock *sync.RWMutex) { 	lock.Lock() // 上锁 	fmt.Println(&amp;#34;疯狂刮痧&amp;#34;) 	time.Sleep(time.Second) 	lock.Unlock() // 解锁 } func readLockFun(lock *sync.</description>
    </item>
    
    <item>
      <title>Golang入门篇|11.assertion、reflect</title>
      <link>https://dogbsd.github.io/posts/golang-learning-11/</link>
      <pubDate>Fri, 06 May 2022 03:32:24 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-11/</guid>
      <description>断言 assertion  把一个接口类型指定为它原始的类型
 package main  import &amp;#34;fmt&amp;#34;  type User struct { 	Name string 	Age int 	Sex bool }  type Student struct { 	User // 匿名结构体 }  func (u User) SayName(name string) { 	fmt.Println(&amp;#34;My Name: &amp;#34;, name) }  func main() { 	u := User{ 	Name: &amp;#34;bsd&amp;#34;, 	Age: 18, 	Sex: true, 	} 	check(u) 	check1(u)  }  func check(v interface{}) { 	v.</description>
    </item>
    
    <item>
      <title>Golang入门篇|10.goroutine、channel</title>
      <link>https://dogbsd.github.io/posts/golang-learning-10/</link>
      <pubDate>Fri, 06 May 2022 02:06:18 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-10/</guid>
      <description>goroutine  在调用一个方法的前面加上go，比如 go add();会让方法一步执行，相当于协程 进程 &amp;lt;&amp;ndash;线程 &amp;lt;&amp;ndash;协程
 最简单的goroutine package main  import ( 	&amp;#34;fmt&amp;#34; 	&amp;#34;time&amp;#34; )  func main() { 	fmt.Println(&amp;#34;Go&amp;#34;) 	go Run() 	time.Sleep(time.Second) } func Run() { 	fmt.Println(&amp;#34;Run&amp;#34;) } 协程管理器 package main  import ( 	&amp;#34;fmt&amp;#34; 	&amp;#34;sync&amp;#34; )  var wg sync.WaitGroup  func main() { 	wg.Add(1) // 计数器+1 	go Run() 	wg.Wait() // 等待结束  } func Run() { 	fmt.</description>
    </item>
    
    <item>
      <title>Golang入门篇|9.interface{}</title>
      <link>https://dogbsd.github.io/posts/golang-learning-9/</link>
      <pubDate>Fri, 06 May 2022 02:00:54 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-9/</guid>
      <description>声明 type Animal interface { 	Eat() 	Run() } 实现接口 type Animal interface { 	Eat() 	Run() } type Cat struct { 	Name string 	Sex bool }  // 给Cat结构体挂在方法 func (c Cat) Run() { 	fmt.Println(c.Name, &amp;#34;开始跑&amp;#34;) }  func (c Cat) Eat() { 	fmt.Println(c.Name, &amp;#34;开始吃&amp;#34;) } 调用接口 package main  import &amp;#34;fmt&amp;#34;  type Animal interface { 	Eat() 	Run() } type Cat struct { 	Name string 	Sex bool }  type Dog struct { 	Name string 	Sex bool }  func (c Cat) Run() { 	fmt.</description>
    </item>
    
    <item>
      <title>Golang入门篇|8.结构体</title>
      <link>https://dogbsd.github.io/posts/golang-learning-8/</link>
      <pubDate>Fri, 06 May 2022 01:24:29 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-8/</guid>
      <description>结构体是一个可以储存不同数据类型的数据类型
 声明 package main  import &amp;#34;fmt&amp;#34;  type Person struct { 	Name string 	Age int 	Hobbies []string }  func main() { 	var p = Person{Name: &amp;#34;bsd&amp;#34;, Age: 40, Hobbies: []string{&amp;#34;game&amp;#34;, &amp;#34;eat&amp;#34;}} 	fmt.Println(p) // {bsd 40 [game eat]} }  // or 	p1 := new(Person) 	p1.Age = 12 	fmt.Println(p1) 结构体方法 package main  import &amp;#34;fmt&amp;#34;  type Person struct { 	Name string 	Age int 	Hobbies []string }  func (p Person) song(a string) (rest string) { 	fmt.</description>
    </item>
    
    <item>
      <title>Golang入门篇|7.指针、地址</title>
      <link>https://dogbsd.github.io/posts/golang-learning-7/</link>
      <pubDate>Fri, 06 May 2022 00:51:54 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-7/</guid>
      <description> 指针可以减少变量拷贝时的内存消耗
 package main  import &amp;#34;fmt&amp;#34;  func main() { 	// &amp;amp; 地址符，* 取值符 	var a int 	a = 123 	fmt.Println(a) 	var b *int // *int int的指针类型 	b = &amp;amp;a // 将a的地址赋值给b 	fmt.Println(b) 	fmt.Println(*b) // 打印b对应的指针类型的地址的值 }   // 指针参数传参  package main  import &amp;#34;fmt&amp;#34;  func main() { 	var b = 1 	fmt.Println(add(&amp;amp;b))  }  func add(a *int) int { 	return *a + 1 } </description>
    </item>
    
    <item>
      <title>Golang入门篇|6.func 函数</title>
      <link>https://dogbsd.github.io/posts/golang-learning-6/</link>
      <pubDate>Thu, 05 May 2022 06:15:59 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-6/</guid>
      <description>将特定的方法写成函数，方便多次调用，同时保持了代码的整洁性。
 定义Func // Add 大写，暴露出去，应许其他包调用 func Add(a, b int) int { // a,b 为接收参数（入参），int 返回参数 	return a + b // 返回一个int值，符合返回参数的定义 }  // 调用 fmt.Println(Add(1,2)) // 3 匿名函数  可以在main()中书写的函数
 package main  import &amp;#34;fmt&amp;#34;  func main() { 	a1 := func(str string) { // 匿名函数没有函数名 	fmt.Println(str) 	} 	a1(&amp;#34;GOlang&amp;#34;) } 不定向参数 func dd(a int, b ...string) { //不定向参数必须放在最后 	fmt.Println(a, b)  	for k, v := range b { 	fmt.</description>
    </item>
    
    <item>
      <title>Golang入门篇|5.Map</title>
      <link>https://dogbsd.github.io/posts/golang-learning-5/</link>
      <pubDate>Thu, 05 May 2022 05:51:46 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-5/</guid>
      <description>三种声明方式 package main  import &amp;#34;fmt&amp;#34;  func main() { 	var m map[string]string // 简单声明 	m[&amp;#34;bsd&amp;#34;] = &amp;#34;openbsd&amp;#34;  	m1 := map[string]string{} 	m1[&amp;#34;bsd&amp;#34;] = &amp;#34;openbsd&amp;#34; 	m2 := make(map[string]string) 	m2[&amp;#34;bsd&amp;#34;] = &amp;#34;openbsd&amp;#34; 	fmt.Println(m, m1, m2) } map 高级定义数据类型 package main  import &amp;#34;fmt&amp;#34;  func main() {  	m1 := map[int]interface{}{} //定义接受任意数据类型 	m1[1] = &amp;#34;openbsd&amp;#34; 	m1[2] = []int{1, 2, 3, 4}  	fmt.</description>
    </item>
    
    <item>
      <title>Golang入门篇|4.数组和切片</title>
      <link>https://dogbsd.github.io/posts/golang-learning-4/</link>
      <pubDate>Tue, 03 May 2022 19:33:06 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-4/</guid>
      <description>数组 array  把同类元素数组放入一个集合
 // 定义一个数组 package main  import &amp;#34;fmt&amp;#34;  func main() { 	arr := [3]int{1, 2, 3} // 长度为3的，类型为int的数组 	fmt.Println(&amp;#34;数组的长度:&amp;#34;, len(arr)) 	fmt.Println(arr) }  arr := [...]int{1,2,3,4,5,6,7} // 固定长度，不一定需要指定   // 使用new的方式声明数组 var a = new([10]int) a[5] = 3 fmt.Println(a)   数组的缺点，长度不可变，意为这有新数据就无法添加进去，只能重新生成新的数组，消耗了内存。
  数组的循环
  	for i := 0; i &amp;lt; len(a); i++ { 	fmt.Println(a[i]) 	}  	for k, v := range a { 	fmt.</description>
    </item>
    
    <item>
      <title>Golang入门篇|3.流程控制语句</title>
      <link>https://dogbsd.github.io/posts/golang-learning-3/</link>
      <pubDate>Tue, 03 May 2022 19:08:33 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-3/</guid>
      <description>自增自减 ++ &amp;ndash; package main  import &amp;#34;fmt&amp;#34;  func main() { 	a := 0 	a++ // +1 	fmt.Println(a) // 1 	a-- // -1 	fmt.Println(a) // 0 } 条件语句 if else func main() { 	if i, ok := xxx.xxx; ok { // 高级用法 	fmt.Println(&amp;#34;当前为true&amp;#34;) 	} else { 	fmt.Println(&amp;#34;当前为false&amp;#34;) 	} } 选择语句 switch func main() { 	a := 1 	switch a { 	case 0: 	fmt.</description>
    </item>
    
    <item>
      <title>Golang入门篇|2.Golang数据类型、关键字</title>
      <link>https://dogbsd.github.io/posts/golang-learning-2/</link>
      <pubDate>Tue, 03 May 2022 18:23:26 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-2/</guid>
      <description>Golang数据类型  整数类型  int int32 int64 //int默认平台的位数 uint uint32 uint64 //无符号整数 比如 从零开始 byte //字节类型 一般字节组成的数组 rune //是int32的别名，用来存储unicode编码 2.浮点类型
float32 float64 ``  3.字符串类型 ```golang string // 被“”包裹的字符 4.布尔类型
true false 简单判断当前变量的数据类型 package main  import &amp;#34;fmt&amp;#34;  func main() { 	var a string = &amp;#34;3.1415926&amp;#34; 	fmt.Printf(&amp;#34;%T \n&amp;#34;, a) // \n 为换行符，fmt包下的Printf格式化输出函数，%T 变量的类型 } 类型转换 // 一般可以转换的类型 float64 &amp;lt;==&amp;gt; int64 // 浮点转换为整型，小数点为直接丢失 int64 ==&amp;gt; string string == &amp;gt; int64 // 不是所有的string都可以转换，但var a string = &amp;#34;3.</description>
    </item>
    
    <item>
      <title>Golang入门篇|1.变量、包</title>
      <link>https://dogbsd.github.io/posts/golang-learning-1/</link>
      <pubDate>Tue, 03 May 2022 17:48:25 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-1/</guid>
      <description>于盖高楼，必筑其基；最近发现写代码有点困难，借此51长假，重修Golang基础篇！
 变量、常量 package main  import &amp;#34;fmt&amp;#34;  func main() { 	// 变量 	var a string = &amp;#34;Hello Golang!&amp;#34; // 数据类型string 	// 常量 	const b float32 = 5.03 // 浮点类型  	c := &amp;#34;Golang&amp;#34; // 变量隐式声明，不可用于全局变量的声明 	fmt.Println(a, b, c) }  简便声明多个变量的方式  var ( 	a = 1 	b = 2.2 	c = true )  // 如果为同种数据类型 var a, b, c, d = 1, 2, 23, 2 包 package  一个文件夹下不可以出现多个包，main包是程序的入口，其他包可以相互引入。一般文件夹名为包名； 如果一个包中的函数或者变量需要在其他包引入，则需要将变量var a string = &amp;quot;Hello Golang!</description>
    </item>
    
    <item>
      <title>Golang求生之路|log篇</title>
      <link>https://dogbsd.github.io/posts/golang-log/</link>
      <pubDate>Mon, 02 May 2022 20:13:28 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-log/</guid>
      <description> 日志为了更好的记录用户或者程序自身运行时发生的报错或者重要事项记录，方便后期出现系统问题，更加方便的复现，从而辅助问题的修补；同时日志一般保留一定天数（7day，15day，30day)，也需要合理的清楚分割时日，分割间隔一般为 1day，时间过长，不方便后期查找。
 </description>
    </item>
    
  </channel>
</rss>
