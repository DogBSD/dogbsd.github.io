<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CatBSD&#39;s Blog</title>
    <link>https://dogbsd.github.io/posts/</link>
    <description>Recent content in Posts on CatBSD&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© CatBSD</copyright>
    <lastBuildDate>Tue, 03 May 2022 19:33:06 +0800</lastBuildDate><atom:link href="https://dogbsd.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang入门篇|4。数组和切片</title>
      <link>https://dogbsd.github.io/posts/golang-learning-4/</link>
      <pubDate>Tue, 03 May 2022 19:33:06 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-4/</guid>
      <description>数组 array  把同类元素数组放入一个集合
 // 定义一个数组 package main  import &amp;#34;fmt&amp;#34;  func main() { 	arr := [3]int{1, 2, 3} // 长度为3的，类型为int的数组 	fmt.Println(&amp;#34;数组的长度:&amp;#34;, len(arr)) 	fmt.Println(arr) }  arr := [...]int{1,2,3,4,5,6,7} // 固定长度，不一定需要指定   // 使用new的方式声明数组 var a = new([10]int) a[5] = 3 fmt.Println(a)   数组的缺点，长度不可变，意为这有新数据就无法添加进去，只能重新生成新的数组，消耗了内存。
  数组的循环
  	for i := 0; i &amp;lt; len(a); i++ { 	fmt.Println(a[i]) 	}  	for k, v := range a { 	fmt.</description>
    </item>
    
    <item>
      <title>Golang入门篇|3.流程控制语句</title>
      <link>https://dogbsd.github.io/posts/golang-learning-3/</link>
      <pubDate>Tue, 03 May 2022 19:08:33 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-3/</guid>
      <description>自增自减 ++ &amp;ndash; package main  import &amp;#34;fmt&amp;#34;  func main() { 	a := 0 	a++ // +1 	fmt.Println(a) // 1 	a-- // -1 	fmt.Println(a) // 0 } 条件语句 if else func main() { 	if i, ok := xxx.xxx; ok { // 高级用法 	fmt.Println(&amp;#34;当前为true&amp;#34;) 	} else { 	fmt.Println(&amp;#34;当前为false&amp;#34;) 	} } 选择语句 switch func main() { 	a := 1 	switch a { 	case 0: 	fmt.</description>
    </item>
    
    <item>
      <title>Golang入门篇|2.Golang数据类型、关键字</title>
      <link>https://dogbsd.github.io/posts/golang-learning-2/</link>
      <pubDate>Tue, 03 May 2022 18:23:26 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-2/</guid>
      <description>Golang数据类型  整数类型  int int32 int64 //int默认平台的位数 uint uint32 uint64 //无符号整数 比如 从零开始 byte //字节类型 一般字节组成的数组 rune //是int32的别名，用来存储unicode编码 2.浮点类型
float32 float64 ``  3.字符串类型 ```golang string // 被“”包裹的字符 4.布尔类型
true false 简单判断当前变量的数据类型 package main  import &amp;#34;fmt&amp;#34;  func main() { 	var a string = &amp;#34;3.1415926&amp;#34; 	fmt.Printf(&amp;#34;%T \n&amp;#34;, a) // \n 为换行符，fmt包下的Printf格式化输出函数，%T 变量的类型 } 类型转换 // 一般可以转换的类型 float64 &amp;lt;==&amp;gt; int64 // 浮点转换为整型，小数点为直接丢失 int64 ==&amp;gt; string string == &amp;gt; int64 // 不是所有的string都可以转换，但var a string = &amp;#34;3.</description>
    </item>
    
    <item>
      <title>Golang入门篇|1.变量、包</title>
      <link>https://dogbsd.github.io/posts/golang-learning-1/</link>
      <pubDate>Tue, 03 May 2022 17:48:25 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-learning-1/</guid>
      <description>于盖高楼，必筑其基；最近发现写代码有点困难，借此51长假，重修Golang基础篇！
 变量、常量 package main  import &amp;#34;fmt&amp;#34;  func main() { 	// 变量 	var a string = &amp;#34;Hello Golang!&amp;#34; // 数据类型string 	// 常量 	const b float32 = 5.03 // 浮点类型  	c := &amp;#34;Golang&amp;#34; // 变量隐式声明，不可用于全局变量的声明 	fmt.Println(a, b, c) }  简便声明多个变量的方式  var ( 	a = 1 	b = 2.2 	c = true )  // 如果为同种数据类型 var a, b, c, d = 1, 2, 23, 2 包 package  一个文件夹下不可以出现多个包，main包是程序的入口，其他包可以相互引入。一般文件夹名为包名； 如果一个包中的函数或者变量需要在其他包引入，则需要将变量var a string = &amp;quot;Hello Golang!</description>
    </item>
    
    <item>
      <title>Golang求生之路|log篇</title>
      <link>https://dogbsd.github.io/posts/golang-log/</link>
      <pubDate>Mon, 02 May 2022 20:13:28 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/golang-log/</guid>
      <description> 日志为了更好的记录用户或者程序自身运行时发生的报错或者重要事项记录，方便后期出现系统问题，更加方便的复现，从而辅助问题的修补；同时日志一般保留一定天数（7day，15day，30day)，也需要合理的清楚分割时日，分割间隔一般为 1day，时间过长，不方便后期查找。
 </description>
    </item>
    
    <item>
      <title>Typescript Learning 1</title>
      <link>https://dogbsd.github.io/posts/typescript-learning/</link>
      <pubDate>Sat, 30 Apr 2022 20:40:53 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/typescript-learning/</guid>
      <description>今天，正式开始TypeScript的学习，祝我早日修成Vue神功！
环境 笔电: MacBook Air (11-inch, Early 2014) OS: macOS 10.14.6 node: v16.14.2 tsc: Version 4.6.4 Code: _  tsc typescript complie
 Code Run 技巧 一个终端开实时编译：tsc 1.ts -w,另一个终端手动执行：node 1.js 查看结果
  类型推断，函数接收值手动设置类型  // 无法确定值时（类型推断），编译器会认为是 any类型，可接收任意值，会造成代码不健壮 function sum(a:number ,b: number){  return a + b }  console.log(sum(222,3))  // 指定函数返回类型 function sum(a:number ,b: number): string{  return &amp;#39;结果：&amp;#39;+ a + b }  console.log(sum(222,3))  数组  let a = [&amp;#39;sss&amp;#39;] //string[] 数组里的值只能是string a.</description>
    </item>
    
    <item>
      <title>Debian11 Install Postgresql13</title>
      <link>https://dogbsd.github.io/posts/debian11-install-postgresql13/</link>
      <pubDate>Mon, 11 Apr 2022 18:07:00 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/debian11-install-postgresql13/</guid>
      <description>学习一下Postgresql数据库
 安装数据流 # 安装 apt install postgresql postgresql-contrib  # 查看版本 sudo -u postgres psql -c &amp;#34;SELECT version();&amp;#34;    version ---------------------------------------------------------------------------------------------------------------------------  PostgreSQL 13.5 (Debian 13.5-0+deb11u1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 10.2.1-6) 10.2.1 20210110, 64-bit (1 row) 查看已存在数据库 Postgresql安装完成后会自动创建一个postgres用户
su - postgres //切换到postgres用户 psql //进入postgres命令交互 \l //查看所有已存在数据库   postgres=# \l  List of databases  Name | Owner | Encoding | Collate | Ctype | Access privileges -----------+----------+----------+------------+------------+-----------------------  postgres | postgres | UTF8 | en_US.</description>
    </item>
    
    <item>
      <title>Manjaro Kde Install Fcitx5 Zh_CN</title>
      <link>https://dogbsd.github.io/posts/manjaro-kde-install-fcitx5-zh_cn/</link>
      <pubDate>Sat, 26 Feb 2022 15:30:25 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/manjaro-kde-install-fcitx5-zh_cn/</guid>
      <description>安装完成之后注销/重启，添加pinyin输入法即可
 参考：知乎回答
# 中文 # fcitx5-chinese-addons 包含了大量中文输入方式：拼音、双拼、五笔拼音、自然码、仓颉、冰蟾全息、二笔等  sudo pacman -S fcitx5-im fcitx5-chinese-addons sudo pacman -S fcitx5-pinyin-{zhwiki,moegirl}  # 欲在程序中正常启用 Fcitx5, 需设置以下环境变量，并重新登录： sudo nano ~/.pam_environment  GTK_IM_MODULE DEFAULT=fcitx QT_IM_MODULE DEFAULT=fcitx XMODIFIERS DEFAULT=\@im=fcitx INPUT_METHOD DEFAULT=fcitx SDL_IM_MODULE DEFAULT=fcitx GLFW_IM_MODULE DEFAULT=ibus 其他详细配置参考：https://wiki.archlinux.org/title/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</description>
    </item>
    
    <item>
      <title>Arch Linux Install Dwm</title>
      <link>https://dogbsd.github.io/posts/arch-linux-install-dwm/</link>
      <pubDate>Wed, 23 Feb 2022 21:49:33 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/arch-linux-install-dwm/</guid>
      <description>接着上篇的Arch Linux环境基础安装后，进行安装dwm
 克隆 dwm Development code和st终端 # patch 打代码补丁 sudo pacman -S git make gcc patch git clone https://git.suckless.org/dwm git clone https://git.suckless.org/st git clone https://git.suckless.org/dmenu  [xxx@archWork-Server ~]$ tree dwm/ dwm/ ├── config.def.h ├── config.mk ├── drw.c ├── drw.h ├── dwm.1 ├── dwm.c ├── dwm.png ├── LICENSE ├── Makefile ├── README ├── transient.c ├── util.c └── util.h  [hang@archWork-Server ~]$ tree st st ├── arg.h ├── config.def.h ├── config.</description>
    </item>
    
    <item>
      <title>Arch Linux BIOS Install</title>
      <link>https://dogbsd.github.io/posts/arch-linux-bios-install/</link>
      <pubDate>Wed, 23 Feb 2022 17:31:23 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/arch-linux-bios-install/</guid>
      <description>主要是记录一下，安装Arch Linux 难度非常小&amp;hellip; 不是觉得Gentoo编译E5垃圾U太慢，就不会再装Arch。
  安装Arch 基本检查  ping  ping baidu.com  time  root@archiso ~ # timedatectl status  Local time: Wed 2022-02-23 17:36:37 UTC  Universal time: Wed 2022-02-23 17:36:37 UTC  RTC time: Wed 2022-02-23 17:36:37  Time zone: UTC (UTC, +0000) System clock synchronized: no  NTP service: inactive  RTC in local TZ: no  ssh [非必需]  root@archiso ~ # systemctl status sshd ● sshd.</description>
    </item>
    
    <item>
      <title>Linux Voice Dadada</title>
      <link>https://dogbsd.github.io/posts/linux-voice-dadada/</link>
      <pubDate>Mon, 24 Jan 2022 14:33:05 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/linux-voice-dadada/</guid>
      <description> 疑似音频接口进入节能模式
 sudo nano /sys/module/snd_hda_intel/parameters/power_save  # 将1改为0保存即可 </description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://dogbsd.github.io/posts/first/</link>
      <pubDate>Mon, 17 Jan 2022 17:43:21 +0800</pubDate>
      
      <guid>https://dogbsd.github.io/posts/first/</guid>
      <description> 主要是为了记录自己学习，总结经验；分享生活；提出自己的看法
 </description>
    </item>
    
  </channel>
</rss>
